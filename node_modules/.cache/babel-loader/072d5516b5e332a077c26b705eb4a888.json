{"ast":null,"code":"import * as firebase from \"firebase/app\";\nimport 'firebase/database'; // If using Firebase database\n\nimport 'firebase/storage'; // If using Firebase storage\n\nimport 'firebase/auth';\nconst firebaseConfig = {\n  apiKey: \"AIzaSyC6t3rBFVOuOzP3zSX37CW7nBo-u6mVGDM\",\n  authDomain: \"movie-database-faf15.firebaseapp.com\",\n  databaseURL: \"https://movie-database-faf15.firebaseio.com\",\n  projectId: \"movie-database-faf15\",\n  storageBucket: \"movie-database-faf15.appspot.com\",\n  messagingSenderId: \"733450612321\",\n  appId: \"1:733450612321:web:7ba9132bfba7b0b4758420\",\n  measurementId: \"G-NQM7J4DS3S\"\n}; // Initialize Firebase\n\nclass Firebase {\n  constructor() {\n    this.doCreateUserWithEmailAndPassword = (email, password) => this.auth.createUserWithEmailAndPassword(email, password);\n\n    this.doSignInWithEmailAndPassword = (email, password) => this.auth.signInWithEmailAndPassword(email, password);\n\n    this.doSignInAnonymously = () => this.auth.signInAnonymously();\n\n    this.doSignOut = () => this.auth.signOut();\n\n    this.doDeleteAccount = () => this.auth.currentUser.delete();\n\n    this.doReauthenticate = (email, password) => this.auth.currentUser.reauthenticateWithCredential(firebase.auth.EmailAuthProvider(email, password));\n\n    this.doPasswordReset = email => this.auth.sendPasswordResetEmail(email);\n\n    this.user = uid => this.db.ref(`users/${uid}`);\n\n    this.getUser = uid => this.db.ref(`users/${uid}`).once('value');\n\n    this.item = uid => this.db.ref(`users/${uid}/favorites`);\n\n    this.checkItem = uid => this.db.ref(`users/${uid}/favorites`).once('value');\n\n    this.pushItem = () => this.db.ref.child.push();\n\n    this.users = () => this.db.ref('users');\n\n    this.favorites = (uid, id) => this.db.ref().child(`${uid}/favorites`).orderByChild(\"id\").equalTo(id).once(\"value\", snap => {\n      if (!snap.exists()) {\n        const data = snap.val();\n        console.log(data);\n      }\n    });\n\n    firebase.initializeApp(firebaseConfig);\n    this.auth = firebase.auth();\n    this.db = firebase.database();\n  }\n\n}\n\nexport default Firebase;","map":{"version":3,"sources":["/Users/mohidinhassan/movie_website_app/src/components/firebase/firebaseConfig.js"],"names":["firebase","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Firebase","constructor","doCreateUserWithEmailAndPassword","email","password","auth","createUserWithEmailAndPassword","doSignInWithEmailAndPassword","signInWithEmailAndPassword","doSignInAnonymously","signInAnonymously","doSignOut","signOut","doDeleteAccount","currentUser","delete","doReauthenticate","reauthenticateWithCredential","EmailAuthProvider","doPasswordReset","sendPasswordResetEmail","user","uid","db","ref","getUser","once","item","checkItem","pushItem","child","push","users","favorites","id","orderByChild","equalTo","snap","exists","data","val","console","log","initializeApp","database"],"mappings":"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","sourcesContent":["import * as firebase from \"firebase/app\";\nimport 'firebase/database'; // If using Firebase database\nimport 'firebase/storage';  // If using Firebase storage\nimport 'firebase/auth'\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyC6t3rBFVOuOzP3zSX37CW7nBo-u6mVGDM\",\n    authDomain: \"movie-database-faf15.firebaseapp.com\",\n    databaseURL: \"https://movie-database-faf15.firebaseio.com\",\n    projectId: \"movie-database-faf15\",\n    storageBucket: \"movie-database-faf15.appspot.com\",\n    messagingSenderId: \"733450612321\",\n    appId: \"1:733450612321:web:7ba9132bfba7b0b4758420\",\n    measurementId: \"G-NQM7J4DS3S\"\n};\n// Initialize Firebase\nclass Firebase {\n    constructor() {\n        firebase.initializeApp(firebaseConfig);\n        this.auth = firebase.auth()\n        this.db = firebase.database();\n\n    }\n\n    doCreateUserWithEmailAndPassword = (email, password) =>\n        this.auth.createUserWithEmailAndPassword(email, password);\n\n    doSignInWithEmailAndPassword = (email, password) =>\n        this.auth.signInWithEmailAndPassword(email, password);\n\n    doSignInAnonymously = () =>\n        this.auth.signInAnonymously();\n\n    doSignOut = () => this.auth.signOut()\n\n    doDeleteAccount = () => this.auth.currentUser.delete()\n\n\n    doReauthenticate = (email, password) => \n        this.auth.currentUser.reauthenticateWithCredential(firebase.auth.EmailAuthProvider(email, password)) \n\n    doPasswordReset = email => this.auth.sendPasswordResetEmail(email);\n\n    user = uid => this.db.ref(`users/${uid}`);\n    getUser = uid => this.db.ref(`users/${uid}`).once('value')\n    item = uid => this.db.ref(`users/${uid}/favorites`);\n    checkItem = uid => this.db.ref(`users/${uid}/favorites`).once('value')\n    pushItem = () => this.db.ref.child.push()\n    users = () => this.db.ref('users');\n    favorites = (uid, id) => this.db.ref().child(`${uid}/favorites`).orderByChild(\"id\").equalTo(id).once(\"value\", snap => {\n        if(!snap.exists()){\n          const data = snap.val()\n          console.log(data)\n        }\n      });\n\n   }\n\n\nexport default Firebase\n\n\n"]},"metadata":{},"sourceType":"module"}