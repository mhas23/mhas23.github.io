{"ast":null,"code":"var _jsxFileName = \"/Users/mohidinhassan/movie_website_app/src/components/Movies/MovieList.js\";\nimport React, { useState, useEffect } from \"react\";\nimport \"./Movies.scss\";\nimport MovieCard from \"./MovieCard\";\nimport ClipLoader from \"react-spinners/ClipLoader\";\n\nconst MovieList = ({\n  movies,\n  isLoggedIn,\n  userID\n}) => {\n  const [loading, setLoading] = useState(true);\n  let renderedList;\n  let cards = [];\n\n  const getNewCards = () => {};\n\n  useEffect(() => {\n    let time = setTimeout(() => {\n      setLoading(false);\n    }, 1000);\n    return () => {\n      clearTimeout(time);\n      setLoading(true);\n    };\n  }, [movies]);\n\n  if (movies.length === 0) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        display: \"flex\",\n        justifyContent: \"center\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }\n    }, \"No results\"), \" \");\n  }\n\n  if (loading) {\n    return /*#__PURE__*/React.createElement(ClipLoader, {\n      size: 150,\n      color: \"#123abc\",\n      css: `\n          display: block;\n          margin: 0 auto;\n          border-color: black;\n        `,\n      loading: loading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 7\n      }\n    });\n  } else {\n    renderedList = movies.filter(movie => movie.poster_path !== null).map((movie, key) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: key,\n        className: \"movie-list\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(MovieCard, {\n        image: `https://image.tmdb.org/t/p/w185${movie.poster_path}`,\n        id: movie.id,\n        title: movie.title,\n        release_date: movie.release_date,\n        isLoggedIn: isLoggedIn,\n        userID: userID,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }\n      }));\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      textAlign: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"movie-rendered-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, renderedList));\n};\n\nexport default MovieList;","map":{"version":3,"sources":["/Users/mohidinhassan/movie_website_app/src/components/Movies/MovieList.js"],"names":["React","useState","useEffect","MovieCard","ClipLoader","MovieList","movies","isLoggedIn","userID","loading","setLoading","renderedList","cards","getNewCards","time","setTimeout","clearTimeout","length","display","justifyContent","filter","movie","poster_path","map","key","id","title","release_date","textAlign"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAO,eAAP;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,UAAP,MAAuB,2BAAvB;;AAEA,MAAMC,SAAS,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA,UAAV;AAAsBC,EAAAA;AAAtB,CAAD,KAAoC;AACpD,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,IAAD,CAAtC;AACA,MAAIU,YAAJ;AACA,MAAIC,KAAK,GAAG,EAAZ;;AAEA,QAAMC,WAAW,GAAG,MAAM,CAEzB,CAFD;;AAIAX,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIY,IAAI,GAAGC,UAAU,CAAC,MAAM;AAC1BL,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KAFoB,EAElB,IAFkB,CAArB;AAIA,WAAO,MAAM;AACXM,MAAAA,YAAY,CAACF,IAAD,CAAZ;AACAJ,MAAAA,UAAU,CAAC,IAAD,CAAV;AACD,KAHD;AAID,GATQ,EASN,CAACJ,MAAD,CATM,CAAT;;AAWA,MAAIA,MAAM,CAACW,MAAP,KAAkB,CAAtB,EAAyB;AACvB,wBACE;AAAK,MAAA,KAAK,EAAE;AAAEC,QAAAA,OAAO,EAAE,MAAX;AAAmBC,QAAAA,cAAc,EAAE;AAAnC,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,EACsB,GADtB,CADF;AAKD;;AAED,MAAIV,OAAJ,EAAa;AACX,wBACE,oBAAC,UAAD;AACE,MAAA,IAAI,EAAE,GADR;AAEE,MAAA,KAAK,EAAE,SAFT;AAGE,MAAA,GAAG,EAAG;;;;SAHR;AAQE,MAAA,OAAO,EAAEA,OARX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAYD,GAbD,MAaO;AACLE,IAAAA,YAAY,GAAGL,MAAM,CAClBc,MADY,CACJC,KAAD,IAAWA,KAAK,CAACC,WAAN,KAAsB,IAD5B,EAEZC,GAFY,CAER,CAACF,KAAD,EAAQG,GAAR,KAAgB;AACnB,0BACE;AACE,QAAA,GAAG,EAAEA,GADP;AAEE,QAAA,SAAS,EAAC,YAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAIE,oBAAC,SAAD;AACE,QAAA,KAAK,EAAG,kCAAiCH,KAAK,CAACC,WAAY,EAD7D;AAEE,QAAA,EAAE,EAAED,KAAK,CAACI,EAFZ;AAGE,QAAA,KAAK,EAAEJ,KAAK,CAACK,KAHf;AAIE,QAAA,YAAY,EAAEL,KAAK,CAACM,YAJtB;AAKE,QAAA,UAAU,EAAEpB,UALd;AAME,QAAA,MAAM,EAAEC,MANV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJF,CADF;AAeD,KAlBY,CAAf;AAmBD;;AAED,sBACE;AAAK,IAAA,KAAK,EAAE;AAAEoB,MAAAA,SAAS,EAAE;AAAb,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAsCjB,YAAtC,CADF,CADF;AAKD,CApED;;AAsEA,eAAeN,SAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./Movies.scss\";\nimport MovieCard from \"./MovieCard\";\nimport ClipLoader from \"react-spinners/ClipLoader\";\n\nconst MovieList = ({ movies, isLoggedIn, userID }) => {\n  const [loading, setLoading] = useState(true);\n  let renderedList;\n  let cards = []\n\n  const getNewCards = () => {\n\n  }\n\n  useEffect(() => {\n    let time = setTimeout(() => {\n      setLoading(false);\n    }, 1000);\n\n    return () => {\n      clearTimeout(time);\n      setLoading(true);\n    };\n  }, [movies]);\n\n  if (movies.length === 0) {\n    return (\n      <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n        <h4>No results</h4>{\" \"}\n      </div>\n    );\n  }\n\n  if (loading) {\n    return (\n      <ClipLoader\n        size={150}\n        color={\"#123abc\"}\n        css={`\n          display: block;\n          margin: 0 auto;\n          border-color: black;\n        `}\n        loading={loading}\n      ></ClipLoader>\n    );\n  } else {\n    renderedList = movies\n      .filter((movie) => movie.poster_path !== null)\n      .map((movie, key) => {\n        return (\n          <div\n            key={key}\n            className=\"movie-list\"\n          >\n            <MovieCard\n              image={`https://image.tmdb.org/t/p/w185${movie.poster_path}`}\n              id={movie.id}\n              title={movie.title}\n              release_date={movie.release_date}\n              isLoggedIn={isLoggedIn}\n              userID={userID}\n            />\n          </div>\n        );\n      });\n  }\n\n  return (\n    <div style={{ textAlign: \"center\" }}>\n      <div className=\"movie-rendered-list\">{renderedList}</div>\n    </div>\n  );\n};\n\nexport default MovieList;\n"]},"metadata":{},"sourceType":"module"}